"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isEmpty = exports.getDataSchema = void 0;
const util_internal_1 = require("@subsquid/util-internal");
const util_internal_validation_1 = require("@subsquid/util-internal-validation");
exports.getDataSchema = (0, util_internal_1.weakMemo)((fields) => {
    let BlockHeader = (0, util_internal_validation_1.object)({
        number: util_internal_validation_1.NAT,
        hash: util_internal_validation_1.BYTES,
        ...project(fields.block, {
            daHeight: util_internal_validation_1.BIG_NAT,
            transactionsRoot: util_internal_validation_1.BYTES,
            transactionsCount: util_internal_validation_1.NAT,
            messageReceiptCount: util_internal_validation_1.NAT,
            applicationHash: util_internal_validation_1.BYTES,
            prevRoot: util_internal_validation_1.BYTES,
            time: util_internal_validation_1.BIG_NAT,
            eventInboxRoot: util_internal_validation_1.BYTES,
            consensusParametersVersion: util_internal_validation_1.NAT,
            stateTransitionBytecodeVersion: util_internal_validation_1.NAT,
            messageOutboxRoot: util_internal_validation_1.BYTES,
        })
    });
    let TransactionStatus = (0, util_internal_validation_1.taggedUnion)('type', {
        SubmittedStatus: (0, util_internal_validation_1.object)({ time: util_internal_validation_1.BIG_NAT }),
        SuccessStatus: (0, util_internal_validation_1.object)({
            transactionId: util_internal_validation_1.BYTES,
            time: util_internal_validation_1.BIG_NAT,
            programState: (0, util_internal_validation_1.option)((0, util_internal_validation_1.object)({
                returnType: (0, util_internal_validation_1.oneOf)({
                    return: (0, util_internal_validation_1.constant)('RETURN'),
                    returnData: (0, util_internal_validation_1.constant)('RETURN_DATA'),
                    revert: (0, util_internal_validation_1.constant)('REVERT'),
                }),
                data: util_internal_validation_1.BYTES,
            })),
            totalGas: util_internal_validation_1.BIG_NAT,
            totalFee: util_internal_validation_1.BIG_NAT,
        }),
        SqueezedOutStatus: (0, util_internal_validation_1.object)({ reason: util_internal_validation_1.STRING }),
        FailureStatus: (0, util_internal_validation_1.object)({
            transactionId: util_internal_validation_1.BYTES,
            time: util_internal_validation_1.BIG_NAT,
            reason: util_internal_validation_1.STRING,
            programState: (0, util_internal_validation_1.option)((0, util_internal_validation_1.object)({
                returnType: (0, util_internal_validation_1.oneOf)({
                    RETURN: (0, util_internal_validation_1.constant)('RETURN'),
                    RETURN_DATA: (0, util_internal_validation_1.constant)('RETURN_DATA'),
                    REVERT: (0, util_internal_validation_1.constant)('REVERT'),
                }),
                data: util_internal_validation_1.BYTES,
            })),
            totalGas: util_internal_validation_1.BIG_NAT,
            totalFee: util_internal_validation_1.BIG_NAT,
        })
    });
    let UpgradePurpose = (0, util_internal_validation_1.taggedUnion)('type', {
        ConsensusParametersPurpose: (0, util_internal_validation_1.object)({
            witnessIndex: util_internal_validation_1.NAT,
            checksum: util_internal_validation_1.BYTES,
        }),
        StateTransitionPurpose: (0, util_internal_validation_1.object)({
            root: util_internal_validation_1.BYTES,
        }),
    });
    let Transaction = (0, util_internal_validation_1.object)({
        index: util_internal_validation_1.NAT,
        ...project(fields.transaction, {
            bytecodeWitnessIndex: (0, util_internal_validation_1.option)(util_internal_validation_1.NAT),
            bytecodeRoot: (0, util_internal_validation_1.option)(util_internal_validation_1.BYTES),
            hash: util_internal_validation_1.BYTES,
            inputAssetIds: (0, util_internal_validation_1.option)((0, util_internal_validation_1.array)(util_internal_validation_1.BYTES)),
            policies: (0, util_internal_validation_1.option)((0, util_internal_validation_1.object)({
                tip: (0, util_internal_validation_1.option)(util_internal_validation_1.BIG_NAT),
                witnessLimit: (0, util_internal_validation_1.option)(util_internal_validation_1.BIG_NAT),
                maturity: (0, util_internal_validation_1.option)(util_internal_validation_1.NAT),
                maxFee: (0, util_internal_validation_1.option)(util_internal_validation_1.BIG_NAT)
            })),
            inputContract: (0, util_internal_validation_1.option)((0, util_internal_validation_1.object)({
                utxoId: util_internal_validation_1.BYTES,
                balanceRoot: util_internal_validation_1.BYTES,
                stateRoot: util_internal_validation_1.BYTES,
                txPointer: util_internal_validation_1.STRING,
                contractId: util_internal_validation_1.BYTES
            })),
            inputContracts: (0, util_internal_validation_1.option)((0, util_internal_validation_1.array)(util_internal_validation_1.BYTES)),
            isCreate: util_internal_validation_1.BOOLEAN,
            isMint: util_internal_validation_1.BOOLEAN,
            isScript: util_internal_validation_1.BOOLEAN,
            isUpgrade: util_internal_validation_1.BOOLEAN,
            isUpload: util_internal_validation_1.BOOLEAN,
            maturity: (0, util_internal_validation_1.option)(util_internal_validation_1.NAT),
            mintAmount: (0, util_internal_validation_1.option)(util_internal_validation_1.BIG_NAT),
            mintAssetId: (0, util_internal_validation_1.option)(util_internal_validation_1.BYTES),
            mintGasPrice: (0, util_internal_validation_1.option)(util_internal_validation_1.BIG_NAT),
            outputContract: (0, util_internal_validation_1.option)((0, util_internal_validation_1.object)({
                inputIndex: util_internal_validation_1.NAT,
                balanceRoot: util_internal_validation_1.BYTES,
                stateRoot: util_internal_validation_1.BYTES
            })),
            rawPayload: (0, util_internal_validation_1.option)(util_internal_validation_1.BYTES),
            receiptsRoot: (0, util_internal_validation_1.option)(util_internal_validation_1.BYTES),
            salt: (0, util_internal_validation_1.option)(util_internal_validation_1.BYTES),
            script: (0, util_internal_validation_1.option)(util_internal_validation_1.BYTES),
            scriptData: (0, util_internal_validation_1.option)(util_internal_validation_1.BYTES),
            scriptGasLimit: (0, util_internal_validation_1.option)(util_internal_validation_1.BIG_NAT),
            storageSlots: (0, util_internal_validation_1.option)((0, util_internal_validation_1.array)(util_internal_validation_1.BYTES)),
            txPointer: (0, util_internal_validation_1.option)(util_internal_validation_1.STRING),
            type: (0, util_internal_validation_1.oneOf)({
                script: (0, util_internal_validation_1.constant)('Script'),
                create: (0, util_internal_validation_1.constant)('Create'),
                mint: (0, util_internal_validation_1.constant)('Mint'),
            }),
            witnesses: (0, util_internal_validation_1.option)((0, util_internal_validation_1.array)(util_internal_validation_1.BYTES)),
            status: (0, util_internal_validation_1.option)(TransactionStatus),
            subsectionIndex: (0, util_internal_validation_1.option)(util_internal_validation_1.NAT),
            subsectionsNumber: (0, util_internal_validation_1.option)(util_internal_validation_1.NAT),
            proofSet: (0, util_internal_validation_1.option)((0, util_internal_validation_1.array)(util_internal_validation_1.BYTES)),
            upgradePurpose: (0, util_internal_validation_1.option)(UpgradePurpose),
        })
    });
    let Receipt = (0, util_internal_validation_1.object)({
        transactionIndex: util_internal_validation_1.NAT,
        index: util_internal_validation_1.NAT,
        ...project(fields.receipt, {
            amount: (0, util_internal_validation_1.option)(util_internal_validation_1.BIG_NAT),
            assetId: (0, util_internal_validation_1.option)(util_internal_validation_1.BYTES),
            contract: (0, util_internal_validation_1.option)(util_internal_validation_1.BYTES),
            contractId: (0, util_internal_validation_1.option)(util_internal_validation_1.BYTES),
            data: (0, util_internal_validation_1.option)(util_internal_validation_1.BYTES),
            digest: (0, util_internal_validation_1.option)(util_internal_validation_1.BYTES),
            gas: (0, util_internal_validation_1.option)(util_internal_validation_1.BIG_NAT),
            gasUsed: (0, util_internal_validation_1.option)(util_internal_validation_1.BIG_NAT),
            is: (0, util_internal_validation_1.option)(util_internal_validation_1.BIG_NAT),
            len: (0, util_internal_validation_1.option)(util_internal_validation_1.BIG_NAT),
            nonce: (0, util_internal_validation_1.option)(util_internal_validation_1.BYTES),
            param1: (0, util_internal_validation_1.option)(util_internal_validation_1.BIG_NAT),
            param2: (0, util_internal_validation_1.option)(util_internal_validation_1.BIG_NAT),
            pc: (0, util_internal_validation_1.option)(util_internal_validation_1.BIG_NAT),
            ptr: (0, util_internal_validation_1.option)(util_internal_validation_1.BIG_NAT),
            ra: (0, util_internal_validation_1.option)(util_internal_validation_1.BIG_NAT),
            rb: (0, util_internal_validation_1.option)(util_internal_validation_1.BIG_NAT),
            rc: (0, util_internal_validation_1.option)(util_internal_validation_1.BIG_NAT),
            rd: (0, util_internal_validation_1.option)(util_internal_validation_1.BIG_NAT),
            reason: (0, util_internal_validation_1.option)(util_internal_validation_1.BIG_NAT),
            receiptType: (0, util_internal_validation_1.oneOf)({
                CALL: (0, util_internal_validation_1.constant)('CALL'),
                RETURN: (0, util_internal_validation_1.constant)('RETURN'),
                RETURN_DATA: (0, util_internal_validation_1.constant)('RETURN_DATA'),
                PANIC: (0, util_internal_validation_1.constant)('PANIC'),
                REVERT: (0, util_internal_validation_1.constant)('REVERT'),
                LOG: (0, util_internal_validation_1.constant)('LOG'),
                LOG_DATA: (0, util_internal_validation_1.constant)('LOG_DATA'),
                TRANSFER: (0, util_internal_validation_1.constant)('TRANSFER'),
                TRANSFER_OUT: (0, util_internal_validation_1.constant)('TRANSFER_OUT'),
                SCRIPT_RESULT: (0, util_internal_validation_1.constant)('SCRIPT_RESULT'),
                MESSAGE_OUT: (0, util_internal_validation_1.constant)('MESSAGE_OUT'),
                MINT: (0, util_internal_validation_1.constant)('MINT'),
                BURN: (0, util_internal_validation_1.constant)('BURN'),
            }),
            recipient: (0, util_internal_validation_1.option)(util_internal_validation_1.BYTES),
            result: (0, util_internal_validation_1.option)(util_internal_validation_1.BIG_NAT),
            sender: (0, util_internal_validation_1.option)(util_internal_validation_1.BYTES),
            subId: (0, util_internal_validation_1.option)(util_internal_validation_1.BYTES),
            to: (0, util_internal_validation_1.option)(util_internal_validation_1.BYTES),
            toAddress: (0, util_internal_validation_1.option)(util_internal_validation_1.BYTES),
            val: (0, util_internal_validation_1.option)(util_internal_validation_1.BIG_NAT),
        })
    });
    let InputCoin = (0, util_internal_validation_1.object)({
        transactionIndex: util_internal_validation_1.NAT,
        index: util_internal_validation_1.NAT,
        ...project({
            amount: fields.input?.coinAmount,
            assetId: fields.input?.coinAssetId,
            owner: fields.input?.coinOwner,
            predicate: fields.input?.coinPredicate,
            predicateData: fields.input?.coinPredicateData,
            predicateGasUsed: fields.input?.coinPredicateGasUsed,
            txPointer: fields.input?.coinTxPointer,
            utxoId: fields.input?.coinUtxoId,
            witnessIndex: fields.input?.coinWitnessIndex
        }, {
            utxoId: util_internal_validation_1.BYTES,
            owner: util_internal_validation_1.BYTES,
            amount: util_internal_validation_1.BIG_NAT,
            assetId: util_internal_validation_1.BYTES,
            txPointer: util_internal_validation_1.STRING,
            witnessIndex: util_internal_validation_1.NAT,
            maturity: util_internal_validation_1.NAT,
            predicateGasUsed: util_internal_validation_1.BIG_NAT,
            predicate: util_internal_validation_1.BYTES,
            predicateData: util_internal_validation_1.BYTES,
        })
    });
    let InputContract = (0, util_internal_validation_1.object)({
        transactionIndex: util_internal_validation_1.NAT,
        index: util_internal_validation_1.NAT,
        ...project({
            utxoId: fields.input?.contractUtxoId,
            balanceRoot: fields.input?.contractBalanceRoot,
            contractId: fields.input?.contractContractId,
            stateRoot: fields.input?.contractStateRoot,
            txPointer: fields.input?.contractTxPointer
        }, {
            utxoId: util_internal_validation_1.BYTES,
            balanceRoot: util_internal_validation_1.BYTES,
            stateRoot: util_internal_validation_1.BYTES,
            txPointer: util_internal_validation_1.STRING,
            contractId: util_internal_validation_1.BYTES,
        })
    });
    let InputMessage = (0, util_internal_validation_1.object)({
        transactionIndex: util_internal_validation_1.NAT,
        index: util_internal_validation_1.NAT,
        ...project({
            sender: fields.input?.messageSender,
            amount: fields.input?.messageAmount,
            data: fields.input?.messageData,
            nonce: fields.input?.messageNonce,
            predicate: fields.input?.messagePredicate,
            predicateData: fields.input?.messagePredicateData,
            predicateGasUsed: fields.input?.messagePredicateGasUsed,
            recipient: fields.input?.messageRecipient,
            witnessIndex: fields.input?.messageWitnessIndex
        }, {
            sender: util_internal_validation_1.BYTES,
            recipient: util_internal_validation_1.BYTES,
            amount: util_internal_validation_1.BIG_NAT,
            nonce: util_internal_validation_1.BYTES,
            witnessIndex: util_internal_validation_1.NAT,
            predicateGasUsed: util_internal_validation_1.BIG_NAT,
            data: util_internal_validation_1.BYTES,
            predicate: util_internal_validation_1.BYTES,
            predicateData: util_internal_validation_1.BYTES,
        })
    });
    let Input = (0, util_internal_validation_1.taggedUnion)('type', {
        InputCoin,
        InputContract,
        InputMessage
    });
    let CoinOutput = (0, util_internal_validation_1.object)({
        transactionIndex: util_internal_validation_1.NAT,
        index: util_internal_validation_1.NAT,
        ...project({
            amount: fields.output?.coinAmount,
            assetId: fields.output?.coinAssetId,
            to: fields.output?.coinTo
        }, {
            to: util_internal_validation_1.BYTES,
            amount: util_internal_validation_1.BIG_NAT,
            assetId: util_internal_validation_1.BYTES
        })
    });
    let ContractOutput = (0, util_internal_validation_1.object)({
        transactionIndex: util_internal_validation_1.NAT,
        index: util_internal_validation_1.NAT,
        ...project({
            inputIndex: fields.output?.contractInputIndex,
            balanceRoot: fields.output?.contractBalanceRoot,
            stateRoot: fields.output?.contractStateRoot
        }, {
            inputIndex: util_internal_validation_1.NAT,
            balanceRoot: util_internal_validation_1.BYTES,
            stateRoot: util_internal_validation_1.BYTES
        })
    });
    let ChangeOutput = (0, util_internal_validation_1.object)({
        transactionIndex: util_internal_validation_1.NAT,
        index: util_internal_validation_1.NAT,
        ...project({
            amount: fields.output?.changeAmount,
            assetId: fields.output?.changeAssetId,
            to: fields.output?.changeTo
        }, {
            to: util_internal_validation_1.BYTES,
            amount: util_internal_validation_1.BIG_NAT,
            assetId: util_internal_validation_1.BYTES
        })
    });
    let VariableOutput = (0, util_internal_validation_1.object)({
        transactionIndex: util_internal_validation_1.NAT,
        index: util_internal_validation_1.NAT,
        ...project({
            to: fields.output?.variableTo,
            amount: fields.output?.variableAmount,
            assetId: fields.output?.variableAssetId
        }, {
            to: util_internal_validation_1.BYTES,
            amount: util_internal_validation_1.BIG_NAT,
            assetId: util_internal_validation_1.BYTES
        })
    });
    let ContractCreated = (0, util_internal_validation_1.object)({
        transactionIndex: util_internal_validation_1.NAT,
        index: util_internal_validation_1.NAT,
        ...project({
            contract: fields.output?.contractCreatedContract,
            stateRoot: fields.output?.contractCreatedStateRoot
        }, {
            contract: util_internal_validation_1.BYTES,
            stateRoot: util_internal_validation_1.BYTES
        })
    });
    let Ouput = (0, util_internal_validation_1.taggedUnion)('type', {
        CoinOutput,
        ContractOutput,
        ChangeOutput,
        VariableOutput,
        ContractCreated
    });
    return (0, util_internal_validation_1.object)({
        header: BlockHeader,
        transactions: (0, util_internal_validation_1.option)((0, util_internal_validation_1.array)(Transaction)),
        receipts: (0, util_internal_validation_1.option)((0, util_internal_validation_1.array)(Receipt)),
        inputs: (0, util_internal_validation_1.option)((0, util_internal_validation_1.array)(Input)),
        outputs: (0, util_internal_validation_1.option)((0, util_internal_validation_1.array)(Ouput)),
    });
});
function project(fields, obj) {
    if (fields == null)
        return {};
    let result = {};
    let key;
    for (key in obj) {
        if (fields[key]) {
            result[key] = obj[key];
        }
    }
    return result;
}
function isEmpty(obj) {
    for (let _ in obj) {
        return false;
    }
    return true;
}
exports.isEmpty = isEmpty;
//# sourceMappingURL=data-schema.js.map