import { HttpClient } from '@subsquid/http-client';
import { Batch } from '@subsquid/util-internal-ingest-tools';
import { RangeRequest } from '@subsquid/util-internal-range';
import { BlockData, DataRequest, BlockHeader } from './raw-data';
export interface HttpDataSourceOptions {
    client: HttpClient;
    headPollInterval?: number;
    strideSize?: number;
    strideConcurrency?: number;
}
export declare class HttpDataSource {
    private client;
    private headPollInterval;
    private strideSize;
    private strideConcurrency;
    constructor(options: HttpDataSourceOptions);
    getFinalizedHeight(): Promise<number>;
    getBlockHash(height: number): Promise<string | undefined>;
    getBlockHeader(height: number): Promise<BlockHeader | undefined>;
    getFinalizedBlocks(requests: RangeRequest<DataRequest>[], stopOnHead?: boolean): AsyncIterable<Batch<BlockData>>;
    private getSplit;
    private request;
}
//# sourceMappingURL=data-source.d.ts.map