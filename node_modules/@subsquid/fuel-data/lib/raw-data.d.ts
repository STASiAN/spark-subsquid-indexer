import { GetSrcType } from '@subsquid/util-internal-validation';
export declare const LatestBlockHeight: import("@subsquid/util-internal-validation").Validator<{
    chain: {
        latestBlock: {
            header: {
                height: number;
            };
        };
    };
}, {
    chain: {
        latestBlock: {
            header: {
                height: string;
            };
        };
    };
}>;
export type LatestBlockHeight = GetSrcType<typeof LatestBlockHeight>;
export declare const GetBlockHash: import("@subsquid/util-internal-validation").Validator<{
    block?: {
        id: string;
    } | undefined;
}, {
    block?: {
        id: string;
    } | null | undefined;
}>;
export type GetBlockHash = GetSrcType<typeof GetBlockHash>;
export declare const BlockHeader: import("@subsquid/util-internal-validation").Validator<{
    id: string;
    height: number;
    daHeight: bigint;
    transactionsRoot: string;
    transactionsCount: number;
    messageReceiptCount: number;
    prevRoot: string;
    time: bigint;
    applicationHash: string;
    consensusParametersVersion: number;
    stateTransitionBytecodeVersion: number;
    eventInboxRoot: string;
    messageOutboxRoot: string;
}, {
    id: string;
    height: string;
    daHeight: string;
    transactionsRoot: string;
    transactionsCount: string;
    messageReceiptCount: string;
    prevRoot: string;
    time: string;
    applicationHash: string;
    consensusParametersVersion: string;
    stateTransitionBytecodeVersion: string;
    eventInboxRoot: string;
    messageOutboxRoot: string;
}>;
export type BlockHeader = GetSrcType<typeof BlockHeader>;
export declare const GetBlockHeader: import("@subsquid/util-internal-validation").Validator<{
    block?: {
        header: {
            id: string;
            height: number;
            daHeight: bigint;
            transactionsRoot: string;
            transactionsCount: number;
            messageReceiptCount: number;
            prevRoot: string;
            time: bigint;
            applicationHash: string;
            consensusParametersVersion: number;
            stateTransitionBytecodeVersion: number;
            eventInboxRoot: string;
            messageOutboxRoot: string;
        };
    } | undefined;
}, {
    block?: {
        header: {
            id: string;
            height: string;
            daHeight: string;
            transactionsRoot: string;
            transactionsCount: string;
            messageReceiptCount: string;
            prevRoot: string;
            time: string;
            applicationHash: string;
            consensusParametersVersion: string;
            stateTransitionBytecodeVersion: string;
            eventInboxRoot: string;
            messageOutboxRoot: string;
        };
    } | null | undefined;
}>;
export type GetBlockHeader = GetSrcType<typeof GetBlockHeader>;
export declare const TransactionInput: import("@subsquid/util-internal-validation").Validator<{
    utxoId: string;
    owner: string;
    amount: bigint;
    assetId: string;
    txPointer: string;
    witnessIndex: number;
    predicateGasUsed: bigint;
    predicate: string;
    predicateData: string;
    __typename: "InputCoin";
} | {
    utxoId: string;
    balanceRoot: string;
    stateRoot: string;
    txPointer: string;
    contractId: string;
    __typename: "InputContract";
} | {
    sender: string;
    recipient: string;
    amount: bigint;
    nonce: string;
    witnessIndex: number;
    predicateGasUsed: bigint;
    data: string;
    predicate: string;
    predicateData: string;
    __typename: "InputMessage";
}, {
    utxoId: string;
    owner: string;
    amount: string;
    assetId: string;
    txPointer: string;
    witnessIndex: number;
    predicateGasUsed: string;
    predicate: string;
    predicateData: string;
    __typename: "InputCoin";
} | {
    utxoId: string;
    balanceRoot: string;
    stateRoot: string;
    txPointer: string;
    contractId: string;
    __typename: "InputContract";
} | {
    sender: string;
    recipient: string;
    amount: string;
    nonce: string;
    witnessIndex: string;
    predicateGasUsed: string;
    data: string;
    predicate: string;
    predicateData: string;
    __typename: "InputMessage";
}>;
export type TransactionInput = GetSrcType<typeof TransactionInput>;
export declare const TransactionOutput: import("@subsquid/util-internal-validation").Validator<{
    to: string;
    amount: bigint;
    assetId: string;
    __typename: "CoinOutput";
} | {
    inputIndex: number;
    balanceRoot: string;
    stateRoot: string;
    __typename: "ContractOutput";
} | {
    to: string;
    amount: bigint;
    assetId: string;
    __typename: "ChangeOutput";
} | {
    to: string;
    amount: bigint;
    assetId: string;
    __typename: "VariableOutput";
} | {
    contract: string;
    stateRoot: string;
    __typename: "ContractCreated";
}, {
    to: string;
    amount: string;
    assetId: string;
    __typename: "CoinOutput";
} | {
    inputIndex: string;
    balanceRoot: string;
    stateRoot: string;
    __typename: "ContractOutput";
} | {
    to: string;
    amount: string;
    assetId: string;
    __typename: "ChangeOutput";
} | {
    to: string;
    amount: string;
    assetId: string;
    __typename: "VariableOutput";
} | {
    contract: string;
    stateRoot: string;
    __typename: "ContractCreated";
}>;
export type TransactionOutput = GetSrcType<typeof TransactionOutput>;
export declare const Receipt: import("@subsquid/util-internal-validation").Validator<{
    id: string | null;
    pc: bigint | null;
    is: bigint | null;
    to: string | null;
    toAddress: string | null;
    amount: bigint | null;
    assetId: string | null;
    gas: bigint | null;
    param1: bigint | null;
    param2: bigint | null;
    val: bigint | null;
    ptr: bigint | null;
    digest: string | null;
    reason: bigint | null;
    ra: bigint | null;
    rb: bigint | null;
    rc: bigint | null;
    rd: bigint | null;
    len: bigint | null;
    receiptType: "CALL" | "RETURN" | "RETURN_DATA" | "PANIC" | "REVERT" | "LOG" | "LOG_DATA" | "TRANSFER" | "TRANSFER_OUT" | "SCRIPT_RESULT" | "MESSAGE_OUT" | "MINT" | "BURN";
    result: bigint | null;
    gasUsed: bigint | null;
    data: string | null;
    sender: string | null;
    recipient: string | null;
    nonce: string | null;
    contractId: string | null;
    subId: string | null;
}, {
    id: string | null;
    pc: string | null;
    is: string | null;
    to: string | null;
    toAddress: string | null;
    amount: string | null;
    assetId: string | null;
    gas: string | null;
    param1: string | null;
    param2: string | null;
    val: string | null;
    ptr: string | null;
    digest: string | null;
    reason: string | null;
    ra: string | null;
    rb: string | null;
    rc: string | null;
    rd: string | null;
    len: string | null;
    receiptType: "CALL" | "RETURN" | "RETURN_DATA" | "PANIC" | "REVERT" | "LOG" | "LOG_DATA" | "TRANSFER" | "TRANSFER_OUT" | "SCRIPT_RESULT" | "MESSAGE_OUT" | "MINT" | "BURN";
    result: string | null;
    gasUsed: string | null;
    data: string | null;
    sender: string | null;
    recipient: string | null;
    nonce: string | null;
    contractId: string | null;
    subId: string | null;
}>;
export type Receipt = GetSrcType<typeof Receipt>;
export declare const TransactionStatus: import("@subsquid/util-internal-validation").Validator<{
    time: bigint;
    __typename: "SubmittedStatus";
} | {
    transactionId: string;
    time: bigint;
    programState: {
        returnType: "RETURN" | "RETURN_DATA" | "REVERT";
        data: string;
    } | null;
    totalGas: bigint;
    totalFee: bigint;
    receipts?: {
        id: string | null;
        pc: bigint | null;
        is: bigint | null;
        to: string | null;
        toAddress: string | null;
        amount: bigint | null;
        assetId: string | null;
        gas: bigint | null;
        param1: bigint | null;
        param2: bigint | null;
        val: bigint | null;
        ptr: bigint | null;
        digest: string | null;
        reason: bigint | null;
        ra: bigint | null;
        rb: bigint | null;
        rc: bigint | null;
        rd: bigint | null;
        len: bigint | null;
        receiptType: "CALL" | "RETURN" | "RETURN_DATA" | "PANIC" | "REVERT" | "LOG" | "LOG_DATA" | "TRANSFER" | "TRANSFER_OUT" | "SCRIPT_RESULT" | "MESSAGE_OUT" | "MINT" | "BURN";
        result: bigint | null;
        gasUsed: bigint | null;
        data: string | null;
        sender: string | null;
        recipient: string | null;
        nonce: string | null;
        contractId: string | null;
        subId: string | null;
    }[] | undefined;
    __typename: "SuccessStatus";
} | {
    reason: string;
    __typename: "SqueezedOutStatus";
} | {
    transactionId: string;
    time: bigint;
    reason: string;
    programState: {
        returnType: "RETURN" | "RETURN_DATA" | "REVERT";
        data: string;
    } | null;
    totalGas: bigint;
    totalFee: bigint;
    receipts?: {
        id: string | null;
        pc: bigint | null;
        is: bigint | null;
        to: string | null;
        toAddress: string | null;
        amount: bigint | null;
        assetId: string | null;
        gas: bigint | null;
        param1: bigint | null;
        param2: bigint | null;
        val: bigint | null;
        ptr: bigint | null;
        digest: string | null;
        reason: bigint | null;
        ra: bigint | null;
        rb: bigint | null;
        rc: bigint | null;
        rd: bigint | null;
        len: bigint | null;
        receiptType: "CALL" | "RETURN" | "RETURN_DATA" | "PANIC" | "REVERT" | "LOG" | "LOG_DATA" | "TRANSFER" | "TRANSFER_OUT" | "SCRIPT_RESULT" | "MESSAGE_OUT" | "MINT" | "BURN";
        result: bigint | null;
        gasUsed: bigint | null;
        data: string | null;
        sender: string | null;
        recipient: string | null;
        nonce: string | null;
        contractId: string | null;
        subId: string | null;
    }[] | undefined;
    __typename: "FailureStatus";
}, {
    time: string;
    __typename: "SubmittedStatus";
} | {
    transactionId: string;
    time: string;
    programState: {
        returnType: "RETURN" | "RETURN_DATA" | "REVERT";
        data: string;
    } | null;
    totalGas: string;
    totalFee: string;
    receipts?: {
        id: string | null;
        pc: string | null;
        is: string | null;
        to: string | null;
        toAddress: string | null;
        amount: string | null;
        assetId: string | null;
        gas: string | null;
        param1: string | null;
        param2: string | null;
        val: string | null;
        ptr: string | null;
        digest: string | null;
        reason: string | null;
        ra: string | null;
        rb: string | null;
        rc: string | null;
        rd: string | null;
        len: string | null;
        receiptType: "CALL" | "RETURN" | "RETURN_DATA" | "PANIC" | "REVERT" | "LOG" | "LOG_DATA" | "TRANSFER" | "TRANSFER_OUT" | "SCRIPT_RESULT" | "MESSAGE_OUT" | "MINT" | "BURN";
        result: string | null;
        gasUsed: string | null;
        data: string | null;
        sender: string | null;
        recipient: string | null;
        nonce: string | null;
        contractId: string | null;
        subId: string | null;
    }[] | null | undefined;
    __typename: "SuccessStatus";
} | {
    reason: string;
    __typename: "SqueezedOutStatus";
} | {
    transactionId: string;
    time: string;
    reason: string;
    programState: {
        returnType: "RETURN" | "RETURN_DATA" | "REVERT";
        data: string;
    } | null;
    totalGas: string;
    totalFee: string;
    receipts?: {
        id: string | null;
        pc: string | null;
        is: string | null;
        to: string | null;
        toAddress: string | null;
        amount: string | null;
        assetId: string | null;
        gas: string | null;
        param1: string | null;
        param2: string | null;
        val: string | null;
        ptr: string | null;
        digest: string | null;
        reason: string | null;
        ra: string | null;
        rb: string | null;
        rc: string | null;
        rd: string | null;
        len: string | null;
        receiptType: "CALL" | "RETURN" | "RETURN_DATA" | "PANIC" | "REVERT" | "LOG" | "LOG_DATA" | "TRANSFER" | "TRANSFER_OUT" | "SCRIPT_RESULT" | "MESSAGE_OUT" | "MINT" | "BURN";
        result: string | null;
        gasUsed: string | null;
        data: string | null;
        sender: string | null;
        recipient: string | null;
        nonce: string | null;
        contractId: string | null;
        subId: string | null;
    }[] | null | undefined;
    __typename: "FailureStatus";
}>;
export type TransactionStatus = GetSrcType<typeof TransactionStatus>;
export declare const Policies: import("@subsquid/util-internal-validation").Validator<{
    tip: bigint | null;
    witnessLimit: bigint | null;
    maturity: number | null;
    maxFee: bigint | null;
}, {
    tip: string | null;
    witnessLimit: string | null;
    maturity: string | null;
    maxFee: string | null;
}>;
export type Policies = GetSrcType<typeof Policies>;
export declare const UpgradePurpose: import("@subsquid/util-internal-validation").Validator<{
    witnessIndex: number;
    checksum: string;
    __typename: "ConsensusParametersPurpose";
} | {
    root: string;
    __typename: "StateTransitionPurpose";
}, {
    witnessIndex: string;
    checksum: string;
    __typename: "ConsensusParametersPurpose";
} | {
    root: string;
    __typename: "StateTransitionPurpose";
}>;
export type UpgradePurpose = GetSrcType<typeof UpgradePurpose>;
export declare const Transaction: import("@subsquid/util-internal-validation").Validator<{
    id: string;
    inputAssetIds: string[] | null;
    inputContracts: string[] | null;
    inputContract: {
        utxoId: string;
        balanceRoot: string;
        stateRoot: string;
        txPointer: string;
        contractId: string;
    } | null;
    policies: {
        tip: bigint | null;
        witnessLimit: bigint | null;
        maturity: number | null;
        maxFee: bigint | null;
    } | null;
    scriptGasLimit: bigint | null;
    maturity: number | null;
    mintAmount: bigint | null;
    mintAssetId: string | null;
    mintGasPrice: bigint | null;
    txPointer: string | null;
    isScript: boolean;
    isCreate: boolean;
    isMint: boolean;
    isUpgrade: boolean;
    isUpload: boolean;
    outputContract: {
        inputIndex: number;
        balanceRoot: string;
        stateRoot: string;
    } | null;
    witnesses: string[] | null;
    receiptsRoot: string | null;
    status: {
        time: bigint;
        __typename: "SubmittedStatus";
    } | {
        transactionId: string;
        time: bigint;
        programState: {
            returnType: "RETURN" | "RETURN_DATA" | "REVERT";
            data: string;
        } | null;
        totalGas: bigint;
        totalFee: bigint;
        receipts?: {
            id: string | null;
            pc: bigint | null;
            is: bigint | null;
            to: string | null;
            toAddress: string | null;
            amount: bigint | null;
            assetId: string | null;
            gas: bigint | null;
            param1: bigint | null;
            param2: bigint | null;
            val: bigint | null;
            ptr: bigint | null;
            digest: string | null;
            reason: bigint | null;
            ra: bigint | null;
            rb: bigint | null;
            rc: bigint | null;
            rd: bigint | null;
            len: bigint | null;
            receiptType: "CALL" | "RETURN" | "RETURN_DATA" | "PANIC" | "REVERT" | "LOG" | "LOG_DATA" | "TRANSFER" | "TRANSFER_OUT" | "SCRIPT_RESULT" | "MESSAGE_OUT" | "MINT" | "BURN";
            result: bigint | null;
            gasUsed: bigint | null;
            data: string | null;
            sender: string | null;
            recipient: string | null;
            nonce: string | null;
            contractId: string | null;
            subId: string | null;
        }[] | undefined;
        __typename: "SuccessStatus";
    } | {
        reason: string;
        __typename: "SqueezedOutStatus";
    } | {
        transactionId: string;
        time: bigint;
        reason: string;
        programState: {
            returnType: "RETURN" | "RETURN_DATA" | "REVERT";
            data: string;
        } | null;
        totalGas: bigint;
        totalFee: bigint;
        receipts?: {
            id: string | null;
            pc: bigint | null;
            is: bigint | null;
            to: string | null;
            toAddress: string | null;
            amount: bigint | null;
            assetId: string | null;
            gas: bigint | null;
            param1: bigint | null;
            param2: bigint | null;
            val: bigint | null;
            ptr: bigint | null;
            digest: string | null;
            reason: bigint | null;
            ra: bigint | null;
            rb: bigint | null;
            rc: bigint | null;
            rd: bigint | null;
            len: bigint | null;
            receiptType: "CALL" | "RETURN" | "RETURN_DATA" | "PANIC" | "REVERT" | "LOG" | "LOG_DATA" | "TRANSFER" | "TRANSFER_OUT" | "SCRIPT_RESULT" | "MESSAGE_OUT" | "MINT" | "BURN";
            result: bigint | null;
            gasUsed: bigint | null;
            data: string | null;
            sender: string | null;
            recipient: string | null;
            nonce: string | null;
            contractId: string | null;
            subId: string | null;
        }[] | undefined;
        __typename: "FailureStatus";
    };
    script: string | null;
    scriptData: string | null;
    salt: string | null;
    storageSlots: string[] | null;
    rawPayload: string | null;
    bytecodeWitnessIndex: number | null;
    bytecodeRoot: string | null;
    subsectionIndex: number | null;
    subsectionsNumber: number | null;
    proofSet: string[] | null;
    upgradePurpose: {
        witnessIndex: number;
        checksum: string;
        __typename: "ConsensusParametersPurpose";
    } | {
        root: string;
        __typename: "StateTransitionPurpose";
    } | null;
    inputs?: ({
        utxoId: string;
        owner: string;
        amount: bigint;
        assetId: string;
        txPointer: string;
        witnessIndex: number;
        predicateGasUsed: bigint;
        predicate: string;
        predicateData: string;
        __typename: "InputCoin";
    } | {
        utxoId: string;
        balanceRoot: string;
        stateRoot: string;
        txPointer: string;
        contractId: string;
        __typename: "InputContract";
    } | {
        sender: string;
        recipient: string;
        amount: bigint;
        nonce: string;
        witnessIndex: number;
        predicateGasUsed: bigint;
        data: string;
        predicate: string;
        predicateData: string;
        __typename: "InputMessage";
    })[] | undefined;
    outputs?: ({
        to: string;
        amount: bigint;
        assetId: string;
        __typename: "CoinOutput";
    } | {
        inputIndex: number;
        balanceRoot: string;
        stateRoot: string;
        __typename: "ContractOutput";
    } | {
        to: string;
        amount: bigint;
        assetId: string;
        __typename: "ChangeOutput";
    } | {
        to: string;
        amount: bigint;
        assetId: string;
        __typename: "VariableOutput";
    } | {
        contract: string;
        stateRoot: string;
        __typename: "ContractCreated";
    })[] | undefined;
}, {
    id: string;
    inputAssetIds: string[] | null;
    inputContracts: string[] | null;
    inputContract: {
        utxoId: string;
        balanceRoot: string;
        stateRoot: string;
        txPointer: string;
        contractId: string;
    } | null;
    policies: {
        tip: string | null;
        witnessLimit: string | null;
        maturity: string | null;
        maxFee: string | null;
    } | null;
    scriptGasLimit: string | null;
    maturity: string | null;
    mintAmount: string | null;
    mintAssetId: string | null;
    mintGasPrice: string | null;
    txPointer: string | null;
    isScript: boolean;
    isCreate: boolean;
    isMint: boolean;
    isUpgrade: boolean;
    isUpload: boolean;
    outputContract: {
        inputIndex: string;
        balanceRoot: string;
        stateRoot: string;
    } | null;
    witnesses: string[] | null;
    receiptsRoot: string | null;
    status: {
        time: string;
        __typename: "SubmittedStatus";
    } | {
        transactionId: string;
        time: string;
        programState: {
            returnType: "RETURN" | "RETURN_DATA" | "REVERT";
            data: string;
        } | null;
        totalGas: string;
        totalFee: string;
        receipts?: {
            id: string | null;
            pc: string | null;
            is: string | null;
            to: string | null;
            toAddress: string | null;
            amount: string | null;
            assetId: string | null;
            gas: string | null;
            param1: string | null;
            param2: string | null;
            val: string | null;
            ptr: string | null;
            digest: string | null;
            reason: string | null;
            ra: string | null;
            rb: string | null;
            rc: string | null;
            rd: string | null;
            len: string | null;
            receiptType: "CALL" | "RETURN" | "RETURN_DATA" | "PANIC" | "REVERT" | "LOG" | "LOG_DATA" | "TRANSFER" | "TRANSFER_OUT" | "SCRIPT_RESULT" | "MESSAGE_OUT" | "MINT" | "BURN";
            result: string | null;
            gasUsed: string | null;
            data: string | null;
            sender: string | null;
            recipient: string | null;
            nonce: string | null;
            contractId: string | null;
            subId: string | null;
        }[] | null | undefined;
        __typename: "SuccessStatus";
    } | {
        reason: string;
        __typename: "SqueezedOutStatus";
    } | {
        transactionId: string;
        time: string;
        reason: string;
        programState: {
            returnType: "RETURN" | "RETURN_DATA" | "REVERT";
            data: string;
        } | null;
        totalGas: string;
        totalFee: string;
        receipts?: {
            id: string | null;
            pc: string | null;
            is: string | null;
            to: string | null;
            toAddress: string | null;
            amount: string | null;
            assetId: string | null;
            gas: string | null;
            param1: string | null;
            param2: string | null;
            val: string | null;
            ptr: string | null;
            digest: string | null;
            reason: string | null;
            ra: string | null;
            rb: string | null;
            rc: string | null;
            rd: string | null;
            len: string | null;
            receiptType: "CALL" | "RETURN" | "RETURN_DATA" | "PANIC" | "REVERT" | "LOG" | "LOG_DATA" | "TRANSFER" | "TRANSFER_OUT" | "SCRIPT_RESULT" | "MESSAGE_OUT" | "MINT" | "BURN";
            result: string | null;
            gasUsed: string | null;
            data: string | null;
            sender: string | null;
            recipient: string | null;
            nonce: string | null;
            contractId: string | null;
            subId: string | null;
        }[] | null | undefined;
        __typename: "FailureStatus";
    };
    script: string | null;
    scriptData: string | null;
    salt: string | null;
    storageSlots: string[] | null;
    rawPayload: string | null;
    bytecodeWitnessIndex: string | null;
    bytecodeRoot: string | null;
    subsectionIndex: string | null;
    subsectionsNumber: string | null;
    proofSet: string[] | null;
    upgradePurpose: {
        witnessIndex: string;
        checksum: string;
        __typename: "ConsensusParametersPurpose";
    } | {
        root: string;
        __typename: "StateTransitionPurpose";
    } | null;
    inputs?: ({
        utxoId: string;
        owner: string;
        amount: string;
        assetId: string;
        txPointer: string;
        witnessIndex: number;
        predicateGasUsed: string;
        predicate: string;
        predicateData: string;
        __typename: "InputCoin";
    } | {
        utxoId: string;
        balanceRoot: string;
        stateRoot: string;
        txPointer: string;
        contractId: string;
        __typename: "InputContract";
    } | {
        sender: string;
        recipient: string;
        amount: string;
        nonce: string;
        witnessIndex: string;
        predicateGasUsed: string;
        data: string;
        predicate: string;
        predicateData: string;
        __typename: "InputMessage";
    })[] | null | undefined;
    outputs?: ({
        to: string;
        amount: string;
        assetId: string;
        __typename: "CoinOutput";
    } | {
        inputIndex: string;
        balanceRoot: string;
        stateRoot: string;
        __typename: "ContractOutput";
    } | {
        to: string;
        amount: string;
        assetId: string;
        __typename: "ChangeOutput";
    } | {
        to: string;
        amount: string;
        assetId: string;
        __typename: "VariableOutput";
    } | {
        contract: string;
        stateRoot: string;
        __typename: "ContractCreated";
    })[] | null | undefined;
}>;
export type Transaction = GetSrcType<typeof Transaction>;
export declare const Block: import("@subsquid/util-internal-validation").Validator<{
    header: {
        id: string;
        height: number;
        daHeight: bigint;
        transactionsRoot: string;
        transactionsCount: number;
        messageReceiptCount: number;
        prevRoot: string;
        time: bigint;
        applicationHash: string;
        consensusParametersVersion: number;
        stateTransitionBytecodeVersion: number;
        eventInboxRoot: string;
        messageOutboxRoot: string;
    };
    transactions: {
        id: string;
        inputAssetIds: string[] | null;
        inputContracts: string[] | null;
        inputContract: {
            utxoId: string;
            balanceRoot: string;
            stateRoot: string;
            txPointer: string;
            contractId: string;
        } | null;
        policies: {
            tip: bigint | null;
            witnessLimit: bigint | null;
            maturity: number | null;
            maxFee: bigint | null;
        } | null;
        scriptGasLimit: bigint | null;
        maturity: number | null;
        mintAmount: bigint | null;
        mintAssetId: string | null;
        mintGasPrice: bigint | null;
        txPointer: string | null;
        isScript: boolean;
        isCreate: boolean;
        isMint: boolean;
        isUpgrade: boolean;
        isUpload: boolean;
        outputContract: {
            inputIndex: number;
            balanceRoot: string;
            stateRoot: string;
        } | null;
        witnesses: string[] | null;
        receiptsRoot: string | null;
        status: {
            time: bigint;
            __typename: "SubmittedStatus";
        } | {
            transactionId: string;
            time: bigint;
            programState: {
                returnType: "RETURN" | "RETURN_DATA" | "REVERT";
                data: string;
            } | null;
            totalGas: bigint;
            totalFee: bigint;
            receipts?: {
                id: string | null;
                pc: bigint | null;
                is: bigint | null;
                to: string | null;
                toAddress: string | null;
                amount: bigint | null;
                assetId: string | null;
                gas: bigint | null;
                param1: bigint | null;
                param2: bigint | null;
                val: bigint | null;
                ptr: bigint | null;
                digest: string | null;
                reason: bigint | null;
                ra: bigint | null;
                rb: bigint | null;
                rc: bigint | null;
                rd: bigint | null;
                len: bigint | null;
                receiptType: "CALL" | "RETURN" | "RETURN_DATA" | "PANIC" | "REVERT" | "LOG" | "LOG_DATA" | "TRANSFER" | "TRANSFER_OUT" | "SCRIPT_RESULT" | "MESSAGE_OUT" | "MINT" | "BURN";
                result: bigint | null;
                gasUsed: bigint | null;
                data: string | null;
                sender: string | null;
                recipient: string | null;
                nonce: string | null;
                contractId: string | null;
                subId: string | null;
            }[] | undefined;
            __typename: "SuccessStatus";
        } | {
            reason: string;
            __typename: "SqueezedOutStatus";
        } | {
            transactionId: string;
            time: bigint;
            reason: string;
            programState: {
                returnType: "RETURN" | "RETURN_DATA" | "REVERT";
                data: string;
            } | null;
            totalGas: bigint;
            totalFee: bigint;
            receipts?: {
                id: string | null;
                pc: bigint | null;
                is: bigint | null;
                to: string | null;
                toAddress: string | null;
                amount: bigint | null;
                assetId: string | null;
                gas: bigint | null;
                param1: bigint | null;
                param2: bigint | null;
                val: bigint | null;
                ptr: bigint | null;
                digest: string | null;
                reason: bigint | null;
                ra: bigint | null;
                rb: bigint | null;
                rc: bigint | null;
                rd: bigint | null;
                len: bigint | null;
                receiptType: "CALL" | "RETURN" | "RETURN_DATA" | "PANIC" | "REVERT" | "LOG" | "LOG_DATA" | "TRANSFER" | "TRANSFER_OUT" | "SCRIPT_RESULT" | "MESSAGE_OUT" | "MINT" | "BURN";
                result: bigint | null;
                gasUsed: bigint | null;
                data: string | null;
                sender: string | null;
                recipient: string | null;
                nonce: string | null;
                contractId: string | null;
                subId: string | null;
            }[] | undefined;
            __typename: "FailureStatus";
        };
        script: string | null;
        scriptData: string | null;
        salt: string | null;
        storageSlots: string[] | null;
        rawPayload: string | null;
        bytecodeWitnessIndex: number | null;
        bytecodeRoot: string | null;
        subsectionIndex: number | null;
        subsectionsNumber: number | null;
        proofSet: string[] | null;
        upgradePurpose: {
            witnessIndex: number;
            checksum: string;
            __typename: "ConsensusParametersPurpose";
        } | {
            root: string;
            __typename: "StateTransitionPurpose";
        } | null;
        inputs?: ({
            utxoId: string;
            owner: string;
            amount: bigint;
            assetId: string;
            txPointer: string;
            witnessIndex: number;
            predicateGasUsed: bigint;
            predicate: string;
            predicateData: string;
            __typename: "InputCoin";
        } | {
            utxoId: string;
            balanceRoot: string;
            stateRoot: string;
            txPointer: string;
            contractId: string;
            __typename: "InputContract";
        } | {
            sender: string;
            recipient: string;
            amount: bigint;
            nonce: string;
            witnessIndex: number;
            predicateGasUsed: bigint;
            data: string;
            predicate: string;
            predicateData: string;
            __typename: "InputMessage";
        })[] | undefined;
        outputs?: ({
            to: string;
            amount: bigint;
            assetId: string;
            __typename: "CoinOutput";
        } | {
            inputIndex: number;
            balanceRoot: string;
            stateRoot: string;
            __typename: "ContractOutput";
        } | {
            to: string;
            amount: bigint;
            assetId: string;
            __typename: "ChangeOutput";
        } | {
            to: string;
            amount: bigint;
            assetId: string;
            __typename: "VariableOutput";
        } | {
            contract: string;
            stateRoot: string;
            __typename: "ContractCreated";
        })[] | undefined;
    }[];
}, {
    header: {
        id: string;
        height: string;
        daHeight: string;
        transactionsRoot: string;
        transactionsCount: string;
        messageReceiptCount: string;
        prevRoot: string;
        time: string;
        applicationHash: string;
        consensusParametersVersion: string;
        stateTransitionBytecodeVersion: string;
        eventInboxRoot: string;
        messageOutboxRoot: string;
    };
    transactions: {
        id: string;
        inputAssetIds: string[] | null;
        inputContracts: string[] | null;
        inputContract: {
            utxoId: string;
            balanceRoot: string;
            stateRoot: string;
            txPointer: string;
            contractId: string;
        } | null;
        policies: {
            tip: string | null;
            witnessLimit: string | null;
            maturity: string | null;
            maxFee: string | null;
        } | null;
        scriptGasLimit: string | null;
        maturity: string | null;
        mintAmount: string | null;
        mintAssetId: string | null;
        mintGasPrice: string | null;
        txPointer: string | null;
        isScript: boolean;
        isCreate: boolean;
        isMint: boolean;
        isUpgrade: boolean;
        isUpload: boolean;
        outputContract: {
            inputIndex: string;
            balanceRoot: string;
            stateRoot: string;
        } | null;
        witnesses: string[] | null;
        receiptsRoot: string | null;
        status: {
            time: string;
            __typename: "SubmittedStatus";
        } | {
            transactionId: string;
            time: string;
            programState: {
                returnType: "RETURN" | "RETURN_DATA" | "REVERT";
                data: string;
            } | null;
            totalGas: string;
            totalFee: string;
            receipts?: {
                id: string | null;
                pc: string | null;
                is: string | null;
                to: string | null;
                toAddress: string | null;
                amount: string | null;
                assetId: string | null;
                gas: string | null;
                param1: string | null;
                param2: string | null;
                val: string | null;
                ptr: string | null;
                digest: string | null;
                reason: string | null;
                ra: string | null;
                rb: string | null;
                rc: string | null;
                rd: string | null;
                len: string | null;
                receiptType: "CALL" | "RETURN" | "RETURN_DATA" | "PANIC" | "REVERT" | "LOG" | "LOG_DATA" | "TRANSFER" | "TRANSFER_OUT" | "SCRIPT_RESULT" | "MESSAGE_OUT" | "MINT" | "BURN";
                result: string | null;
                gasUsed: string | null;
                data: string | null;
                sender: string | null;
                recipient: string | null;
                nonce: string | null;
                contractId: string | null;
                subId: string | null;
            }[] | null | undefined;
            __typename: "SuccessStatus";
        } | {
            reason: string;
            __typename: "SqueezedOutStatus";
        } | {
            transactionId: string;
            time: string;
            reason: string;
            programState: {
                returnType: "RETURN" | "RETURN_DATA" | "REVERT";
                data: string;
            } | null;
            totalGas: string;
            totalFee: string;
            receipts?: {
                id: string | null;
                pc: string | null;
                is: string | null;
                to: string | null;
                toAddress: string | null;
                amount: string | null;
                assetId: string | null;
                gas: string | null;
                param1: string | null;
                param2: string | null;
                val: string | null;
                ptr: string | null;
                digest: string | null;
                reason: string | null;
                ra: string | null;
                rb: string | null;
                rc: string | null;
                rd: string | null;
                len: string | null;
                receiptType: "CALL" | "RETURN" | "RETURN_DATA" | "PANIC" | "REVERT" | "LOG" | "LOG_DATA" | "TRANSFER" | "TRANSFER_OUT" | "SCRIPT_RESULT" | "MESSAGE_OUT" | "MINT" | "BURN";
                result: string | null;
                gasUsed: string | null;
                data: string | null;
                sender: string | null;
                recipient: string | null;
                nonce: string | null;
                contractId: string | null;
                subId: string | null;
            }[] | null | undefined;
            __typename: "FailureStatus";
        };
        script: string | null;
        scriptData: string | null;
        salt: string | null;
        storageSlots: string[] | null;
        rawPayload: string | null;
        bytecodeWitnessIndex: string | null;
        bytecodeRoot: string | null;
        subsectionIndex: string | null;
        subsectionsNumber: string | null;
        proofSet: string[] | null;
        upgradePurpose: {
            witnessIndex: string;
            checksum: string;
            __typename: "ConsensusParametersPurpose";
        } | {
            root: string;
            __typename: "StateTransitionPurpose";
        } | null;
        inputs?: ({
            utxoId: string;
            owner: string;
            amount: string;
            assetId: string;
            txPointer: string;
            witnessIndex: number;
            predicateGasUsed: string;
            predicate: string;
            predicateData: string;
            __typename: "InputCoin";
        } | {
            utxoId: string;
            balanceRoot: string;
            stateRoot: string;
            txPointer: string;
            contractId: string;
            __typename: "InputContract";
        } | {
            sender: string;
            recipient: string;
            amount: string;
            nonce: string;
            witnessIndex: string;
            predicateGasUsed: string;
            data: string;
            predicate: string;
            predicateData: string;
            __typename: "InputMessage";
        })[] | null | undefined;
        outputs?: ({
            to: string;
            amount: string;
            assetId: string;
            __typename: "CoinOutput";
        } | {
            inputIndex: string;
            balanceRoot: string;
            stateRoot: string;
            __typename: "ContractOutput";
        } | {
            to: string;
            amount: string;
            assetId: string;
            __typename: "ChangeOutput";
        } | {
            to: string;
            amount: string;
            assetId: string;
            __typename: "VariableOutput";
        } | {
            contract: string;
            stateRoot: string;
            __typename: "ContractCreated";
        })[] | null | undefined;
    }[];
}>;
export type Block = GetSrcType<typeof Block>;
export declare const Blocks: import("@subsquid/util-internal-validation").Validator<{
    blocks: {
        nodes: {
            header: {
                id: string;
                height: number;
                daHeight: bigint;
                transactionsRoot: string;
                transactionsCount: number;
                messageReceiptCount: number;
                prevRoot: string;
                time: bigint;
                applicationHash: string;
                consensusParametersVersion: number;
                stateTransitionBytecodeVersion: number;
                eventInboxRoot: string;
                messageOutboxRoot: string;
            };
            transactions: {
                id: string;
                inputAssetIds: string[] | null;
                inputContracts: string[] | null;
                inputContract: {
                    utxoId: string;
                    balanceRoot: string;
                    stateRoot: string;
                    txPointer: string;
                    contractId: string;
                } | null;
                policies: {
                    tip: bigint | null;
                    witnessLimit: bigint | null;
                    maturity: number | null;
                    maxFee: bigint | null;
                } | null;
                scriptGasLimit: bigint | null;
                maturity: number | null;
                mintAmount: bigint | null;
                mintAssetId: string | null;
                mintGasPrice: bigint | null;
                txPointer: string | null;
                isScript: boolean;
                isCreate: boolean;
                isMint: boolean;
                isUpgrade: boolean;
                isUpload: boolean;
                outputContract: {
                    inputIndex: number;
                    balanceRoot: string;
                    stateRoot: string;
                } | null;
                witnesses: string[] | null;
                receiptsRoot: string | null;
                status: {
                    time: bigint;
                    __typename: "SubmittedStatus";
                } | {
                    transactionId: string;
                    time: bigint;
                    programState: {
                        returnType: "RETURN" | "RETURN_DATA" | "REVERT";
                        data: string;
                    } | null;
                    totalGas: bigint;
                    totalFee: bigint;
                    receipts?: {
                        id: string | null;
                        pc: bigint | null;
                        is: bigint | null;
                        to: string | null;
                        toAddress: string | null;
                        amount: bigint | null;
                        assetId: string | null;
                        gas: bigint | null;
                        param1: bigint | null;
                        param2: bigint | null;
                        val: bigint | null;
                        ptr: bigint | null;
                        digest: string | null;
                        reason: bigint | null;
                        ra: bigint | null;
                        rb: bigint | null;
                        rc: bigint | null;
                        rd: bigint | null;
                        len: bigint | null;
                        receiptType: "CALL" | "RETURN" | "RETURN_DATA" | "PANIC" | "REVERT" | "LOG" | "LOG_DATA" | "TRANSFER" | "TRANSFER_OUT" | "SCRIPT_RESULT" | "MESSAGE_OUT" | "MINT" | "BURN";
                        result: bigint | null;
                        gasUsed: bigint | null;
                        data: string | null;
                        sender: string | null;
                        recipient: string | null;
                        nonce: string | null;
                        contractId: string | null;
                        subId: string | null;
                    }[] | undefined;
                    __typename: "SuccessStatus";
                } | {
                    reason: string;
                    __typename: "SqueezedOutStatus";
                } | {
                    transactionId: string;
                    time: bigint;
                    reason: string;
                    programState: {
                        returnType: "RETURN" | "RETURN_DATA" | "REVERT";
                        data: string;
                    } | null;
                    totalGas: bigint;
                    totalFee: bigint;
                    receipts?: {
                        id: string | null;
                        pc: bigint | null;
                        is: bigint | null;
                        to: string | null;
                        toAddress: string | null;
                        amount: bigint | null;
                        assetId: string | null;
                        gas: bigint | null;
                        param1: bigint | null;
                        param2: bigint | null;
                        val: bigint | null;
                        ptr: bigint | null;
                        digest: string | null;
                        reason: bigint | null;
                        ra: bigint | null;
                        rb: bigint | null;
                        rc: bigint | null;
                        rd: bigint | null;
                        len: bigint | null;
                        receiptType: "CALL" | "RETURN" | "RETURN_DATA" | "PANIC" | "REVERT" | "LOG" | "LOG_DATA" | "TRANSFER" | "TRANSFER_OUT" | "SCRIPT_RESULT" | "MESSAGE_OUT" | "MINT" | "BURN";
                        result: bigint | null;
                        gasUsed: bigint | null;
                        data: string | null;
                        sender: string | null;
                        recipient: string | null;
                        nonce: string | null;
                        contractId: string | null;
                        subId: string | null;
                    }[] | undefined;
                    __typename: "FailureStatus";
                };
                script: string | null;
                scriptData: string | null;
                salt: string | null;
                storageSlots: string[] | null;
                rawPayload: string | null;
                bytecodeWitnessIndex: number | null;
                bytecodeRoot: string | null;
                subsectionIndex: number | null;
                subsectionsNumber: number | null;
                proofSet: string[] | null;
                upgradePurpose: {
                    witnessIndex: number;
                    checksum: string;
                    __typename: "ConsensusParametersPurpose";
                } | {
                    root: string;
                    __typename: "StateTransitionPurpose";
                } | null;
                inputs?: ({
                    utxoId: string;
                    owner: string;
                    amount: bigint;
                    assetId: string;
                    txPointer: string;
                    witnessIndex: number;
                    predicateGasUsed: bigint;
                    predicate: string;
                    predicateData: string;
                    __typename: "InputCoin";
                } | {
                    utxoId: string;
                    balanceRoot: string;
                    stateRoot: string;
                    txPointer: string;
                    contractId: string;
                    __typename: "InputContract";
                } | {
                    sender: string;
                    recipient: string;
                    amount: bigint;
                    nonce: string;
                    witnessIndex: number;
                    predicateGasUsed: bigint;
                    data: string;
                    predicate: string;
                    predicateData: string;
                    __typename: "InputMessage";
                })[] | undefined;
                outputs?: ({
                    to: string;
                    amount: bigint;
                    assetId: string;
                    __typename: "CoinOutput";
                } | {
                    inputIndex: number;
                    balanceRoot: string;
                    stateRoot: string;
                    __typename: "ContractOutput";
                } | {
                    to: string;
                    amount: bigint;
                    assetId: string;
                    __typename: "ChangeOutput";
                } | {
                    to: string;
                    amount: bigint;
                    assetId: string;
                    __typename: "VariableOutput";
                } | {
                    contract: string;
                    stateRoot: string;
                    __typename: "ContractCreated";
                })[] | undefined;
            }[];
        }[];
    };
}, {
    blocks: {
        nodes: {
            header: {
                id: string;
                height: string;
                daHeight: string;
                transactionsRoot: string;
                transactionsCount: string;
                messageReceiptCount: string;
                prevRoot: string;
                time: string;
                applicationHash: string;
                consensusParametersVersion: string;
                stateTransitionBytecodeVersion: string;
                eventInboxRoot: string;
                messageOutboxRoot: string;
            };
            transactions: {
                id: string;
                inputAssetIds: string[] | null;
                inputContracts: string[] | null;
                inputContract: {
                    utxoId: string;
                    balanceRoot: string;
                    stateRoot: string;
                    txPointer: string;
                    contractId: string;
                } | null;
                policies: {
                    tip: string | null;
                    witnessLimit: string | null;
                    maturity: string | null;
                    maxFee: string | null;
                } | null;
                scriptGasLimit: string | null;
                maturity: string | null;
                mintAmount: string | null;
                mintAssetId: string | null;
                mintGasPrice: string | null;
                txPointer: string | null;
                isScript: boolean;
                isCreate: boolean;
                isMint: boolean;
                isUpgrade: boolean;
                isUpload: boolean;
                outputContract: {
                    inputIndex: string;
                    balanceRoot: string;
                    stateRoot: string;
                } | null;
                witnesses: string[] | null;
                receiptsRoot: string | null;
                status: {
                    time: string;
                    __typename: "SubmittedStatus";
                } | {
                    transactionId: string;
                    time: string;
                    programState: {
                        returnType: "RETURN" | "RETURN_DATA" | "REVERT";
                        data: string;
                    } | null;
                    totalGas: string;
                    totalFee: string;
                    receipts?: {
                        id: string | null;
                        pc: string | null;
                        is: string | null;
                        to: string | null;
                        toAddress: string | null;
                        amount: string | null;
                        assetId: string | null;
                        gas: string | null;
                        param1: string | null;
                        param2: string | null;
                        val: string | null;
                        ptr: string | null;
                        digest: string | null;
                        reason: string | null;
                        ra: string | null;
                        rb: string | null;
                        rc: string | null;
                        rd: string | null;
                        len: string | null;
                        receiptType: "CALL" | "RETURN" | "RETURN_DATA" | "PANIC" | "REVERT" | "LOG" | "LOG_DATA" | "TRANSFER" | "TRANSFER_OUT" | "SCRIPT_RESULT" | "MESSAGE_OUT" | "MINT" | "BURN";
                        result: string | null;
                        gasUsed: string | null;
                        data: string | null;
                        sender: string | null;
                        recipient: string | null;
                        nonce: string | null;
                        contractId: string | null;
                        subId: string | null;
                    }[] | null | undefined;
                    __typename: "SuccessStatus";
                } | {
                    reason: string;
                    __typename: "SqueezedOutStatus";
                } | {
                    transactionId: string;
                    time: string;
                    reason: string;
                    programState: {
                        returnType: "RETURN" | "RETURN_DATA" | "REVERT";
                        data: string;
                    } | null;
                    totalGas: string;
                    totalFee: string;
                    receipts?: {
                        id: string | null;
                        pc: string | null;
                        is: string | null;
                        to: string | null;
                        toAddress: string | null;
                        amount: string | null;
                        assetId: string | null;
                        gas: string | null;
                        param1: string | null;
                        param2: string | null;
                        val: string | null;
                        ptr: string | null;
                        digest: string | null;
                        reason: string | null;
                        ra: string | null;
                        rb: string | null;
                        rc: string | null;
                        rd: string | null;
                        len: string | null;
                        receiptType: "CALL" | "RETURN" | "RETURN_DATA" | "PANIC" | "REVERT" | "LOG" | "LOG_DATA" | "TRANSFER" | "TRANSFER_OUT" | "SCRIPT_RESULT" | "MESSAGE_OUT" | "MINT" | "BURN";
                        result: string | null;
                        gasUsed: string | null;
                        data: string | null;
                        sender: string | null;
                        recipient: string | null;
                        nonce: string | null;
                        contractId: string | null;
                        subId: string | null;
                    }[] | null | undefined;
                    __typename: "FailureStatus";
                };
                script: string | null;
                scriptData: string | null;
                salt: string | null;
                storageSlots: string[] | null;
                rawPayload: string | null;
                bytecodeWitnessIndex: string | null;
                bytecodeRoot: string | null;
                subsectionIndex: string | null;
                subsectionsNumber: string | null;
                proofSet: string[] | null;
                upgradePurpose: {
                    witnessIndex: string;
                    checksum: string;
                    __typename: "ConsensusParametersPurpose";
                } | {
                    root: string;
                    __typename: "StateTransitionPurpose";
                } | null;
                inputs?: ({
                    utxoId: string;
                    owner: string;
                    amount: string;
                    assetId: string;
                    txPointer: string;
                    witnessIndex: number;
                    predicateGasUsed: string;
                    predicate: string;
                    predicateData: string;
                    __typename: "InputCoin";
                } | {
                    utxoId: string;
                    balanceRoot: string;
                    stateRoot: string;
                    txPointer: string;
                    contractId: string;
                    __typename: "InputContract";
                } | {
                    sender: string;
                    recipient: string;
                    amount: string;
                    nonce: string;
                    witnessIndex: string;
                    predicateGasUsed: string;
                    data: string;
                    predicate: string;
                    predicateData: string;
                    __typename: "InputMessage";
                })[] | null | undefined;
                outputs?: ({
                    to: string;
                    amount: string;
                    assetId: string;
                    __typename: "CoinOutput";
                } | {
                    inputIndex: string;
                    balanceRoot: string;
                    stateRoot: string;
                    __typename: "ContractOutput";
                } | {
                    to: string;
                    amount: string;
                    assetId: string;
                    __typename: "ChangeOutput";
                } | {
                    to: string;
                    amount: string;
                    assetId: string;
                    __typename: "VariableOutput";
                } | {
                    contract: string;
                    stateRoot: string;
                    __typename: "ContractCreated";
                })[] | null | undefined;
            }[];
        }[];
    };
}>;
export type Blocks = GetSrcType<typeof Blocks>;
export interface BlockData {
    hash: string;
    height: number;
    block: Block;
}
export interface DataRequest {
    transactions?: boolean;
    inputs?: boolean;
    outputs?: boolean;
    receipts?: boolean;
}
//# sourceMappingURL=raw-data.d.ts.map