"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpDataSource = void 0;
const util_internal_ingest_tools_1 = require("@subsquid/util-internal-ingest-tools");
const util_internal_validation_1 = require("@subsquid/util-internal-validation");
const assert_1 = __importDefault(require("assert"));
const raw_data_1 = require("./raw-data");
const query_1 = require("./query");
function getResultValidator(validator) {
    return function (result) {
        let err = validator.validate(result);
        if (err) {
            throw new util_internal_validation_1.DataValidationError(`server returned unexpected result: ${err.toString()}`);
        }
        else {
            return result;
        }
    };
}
class HttpDataSource {
    constructor(options) {
        this.client = options.client;
        this.headPollInterval = options.headPollInterval ?? 500;
        this.strideSize = options.strideSize || 10;
        this.strideConcurrency = options.strideConcurrency || 5;
        (0, assert_1.default)(this.strideSize >= 1);
    }
    async getFinalizedHeight() {
        let query = (0, query_1.getLatesBlockQuery)();
        let response = await this.request(query, getResultValidator(raw_data_1.LatestBlockHeight));
        let height = parseInt(response.chain.latestBlock.header.height);
        (0, assert_1.default)(Number.isSafeInteger(height));
        return height;
    }
    async getBlockHash(height) {
        let query = (0, query_1.getBlockHashQuery)(height);
        let response = await this.request(query, getResultValidator(raw_data_1.GetBlockHash));
        return response.block?.id;
    }
    async getBlockHeader(height) {
        let query = (0, query_1.getBlockHeaderQuery)(height);
        let response = await this.request(query, getResultValidator(raw_data_1.GetBlockHeader));
        return response.block?.header;
    }
    getFinalizedBlocks(requests, stopOnHead) {
        return (0, util_internal_ingest_tools_1.coldIngest)({
            getFinalizedHeight: () => this.getFinalizedHeight(),
            getSplit: (req) => this.getSplit(req),
            requests,
            concurrency: this.strideConcurrency,
            splitSize: this.strideSize,
            stopOnHead,
            headPollInterval: this.headPollInterval
        });
    }
    async getSplit(req) {
        let first = req.range.to - req.range.from + 1;
        let after = req.range.from == 0 ? undefined : req.range.from - 1;
        let query = (0, query_1.getBlocksQuery)(req.request, first, after);
        let response = await this.request(query, getResultValidator(raw_data_1.Blocks));
        let blocks = response.blocks.nodes.map(block => {
            let height = parseInt(block.header.height);
            (0, assert_1.default)(Number.isSafeInteger(height));
            return {
                hash: block.header.id,
                height,
                block
            };
        });
        return blocks;
    }
    async request(query, validateResult) {
        return this.client.graphqlRequest(query, { retryAttempts: Number.MAX_SAFE_INTEGER })
            .then(res => validateResult ? validateResult(res) : res);
    }
}
exports.HttpDataSource = HttpDataSource;
//# sourceMappingURL=data-source.js.map