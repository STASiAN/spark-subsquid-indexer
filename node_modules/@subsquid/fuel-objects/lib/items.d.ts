import { ReceiptType, TransactionType } from '@subsquid/fuel-normalization';
import { PartialOutput, PartialBlock, PartialBlockHeader, PartialReceipt, PartialTransaction, PartialInput } from '@subsquid/fuel-stream/lib/data/data-partial';
import { Bytes } from '@subsquid/fuel-stream';
export declare class Block {
    header: BlockHeader;
    constructor(header: BlockHeader);
    transactions: Transaction[];
    receipts: Receipt[];
    inputs: Input[];
    outputs: Output[];
    static fromPartial(src: PartialBlock): Block;
}
export declare class BlockHeader implements PartialBlockHeader {
    id: string;
    height: number;
    hash: Bytes;
    constructor(header: PartialBlockHeader);
}
export declare class Transaction implements PartialTransaction {
    #private;
    id: string;
    index: number;
    type?: TransactionType;
    constructor(block: BlockHeader, tx: PartialTransaction);
    get block(): BlockHeader;
    set block(value: BlockHeader);
    get receipts(): Receipt[];
    set receipts(value: Receipt[]);
    set inputs(value: Input[]);
    get inputs(): Input[];
    set outputs(value: Output[]);
    get outputs(): Output[];
}
export declare class Receipt implements PartialReceipt {
    #private;
    id: string;
    index: number;
    transactionIndex: number;
    receiptType?: ReceiptType;
    contract?: Bytes;
    constructor(block: BlockHeader, i: PartialReceipt);
    get block(): BlockHeader;
    set block(value: BlockHeader);
    get transaction(): Transaction | undefined;
    set transaction(value: Transaction | undefined);
    getTransaction(): Transaction;
}
export declare class InputBase {
    #private;
    id: string;
    index: number;
    transactionIndex: number;
    constructor(block: BlockHeader, src: PartialInput);
    get block(): BlockHeader;
    set block(value: BlockHeader);
    get transaction(): Transaction | undefined;
    set transaction(value: Transaction | undefined);
    getTransaction(): Transaction;
}
export declare class InputCoin extends InputBase {
    type: 'InputCoin';
    utxoId?: Bytes;
    owner?: Bytes;
    amount?: bigint;
    assetId?: Bytes;
    txPointer?: string;
    witnessIndex?: number;
    maturity?: number;
    predicateGasUsed?: bigint;
    predicate?: Bytes;
    predicateData?: Bytes;
}
export declare class InputContract extends InputBase {
    type: 'InputContract';
    utxoId?: Bytes;
    balanceRoot?: Bytes;
    stateRoot?: Bytes;
    txPointer?: string;
    contract?: Bytes;
}
export declare class InputMessage extends InputBase {
    type: 'InputMessage';
    sender?: Bytes;
    recipient?: Bytes;
    amount?: bigint;
    nonce?: Bytes;
    witnessIndex?: number;
    predicateGasUsed?: bigint;
    data?: Bytes;
    predicate?: Bytes;
    predicateData?: Bytes;
}
export type Input = InputCoin | InputContract | InputMessage;
export declare class OutputBase {
    #private;
    index: number;
    transactionIndex: number;
    constructor(block: BlockHeader, src: PartialOutput);
    get block(): BlockHeader;
    set block(value: BlockHeader);
    get transaction(): Transaction | undefined;
    set transaction(value: Transaction | undefined);
    getTransaction(): Transaction;
}
export declare class CoinOutput extends OutputBase {
    type: 'CoinOutput';
    to?: Bytes;
    amount?: bigint;
    assetId?: Bytes;
}
export declare class ContractOutput extends OutputBase {
    type: 'ContractOutput';
    inputIndex?: number;
    balanceRoot?: Bytes;
    stateRoot?: Bytes;
}
export declare class ChangeOutput extends OutputBase {
    type: 'ChangeOutput';
    to?: Bytes;
    amount?: bigint;
    assetId?: Bytes;
}
export declare class VariableOutput extends OutputBase {
    type: 'VariableOutput';
    to?: Bytes;
    amount?: bigint;
    assetId?: Bytes;
}
export declare class ContractCreated extends OutputBase {
    type: 'ContractCreated';
    contract?: {
        id?: Bytes;
        bytecode?: Bytes;
        salt?: Bytes;
    };
    stateRoot?: Bytes;
}
export type Output = CoinOutput | ContractOutput | ChangeOutput | VariableOutput | ContractCreated;
//# sourceMappingURL=items.d.ts.map