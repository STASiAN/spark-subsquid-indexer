"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Transaction_block, _Transaction_receipts, _Transaction_inputs, _Transaction_outputs, _Receipt_block, _Receipt_transaction, _InputBase_block, _InputBase_transaction, _OutputBase_block, _OutputBase_transaction;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractCreated = exports.VariableOutput = exports.ChangeOutput = exports.ContractOutput = exports.CoinOutput = exports.OutputBase = exports.InputMessage = exports.InputContract = exports.InputCoin = exports.InputBase = exports.Receipt = exports.Transaction = exports.BlockHeader = exports.Block = void 0;
const util_internal_1 = require("@subsquid/util-internal");
const util_1 = require("./util");
class Block {
    constructor(header) {
        this.header = header;
        this.transactions = [];
        this.receipts = [];
        this.inputs = [];
        this.outputs = [];
    }
    static fromPartial(src) {
        let block = new Block(new BlockHeader(src.header));
        if (src.transactions) {
            block.transactions = src.transactions.map(i => new Transaction(block.header, i));
        }
        if (src.receipts) {
            block.receipts = src.receipts.map(i => new Receipt(block.header, i));
        }
        if (src.inputs) {
            block.inputs = src.inputs.map(i => {
                switch (i.type) {
                    case 'InputCoin':
                        return new InputCoin(block.header, i);
                    case 'InputContract':
                        return new InputContract(block.header, i);
                    case 'InputMessage':
                        return new InputMessage(block.header, i);
                    default:
                        throw (0, util_internal_1.unexpectedCase)(i.type);
                }
            });
        }
        if (src.outputs) {
            block.outputs = src.outputs.map(i => {
                switch (i.type) {
                    case 'ChangeOutput':
                        return new ChangeOutput(block.header, i);
                    case 'CoinOutput':
                        return new CoinOutput(block.header, i);
                    case 'ContractCreated':
                        return new ContractCreated(block.header, i);
                    case 'ContractOutput':
                        return new ContractOutput(block.header, i);
                    case 'VariableOutput':
                        return new VariableOutput(block.header, i);
                    default:
                        throw (0, util_internal_1.unexpectedCase)(i.type);
                }
            });
        }
        return block;
    }
}
exports.Block = Block;
class BlockHeader {
    constructor(header) {
        this.id = (0, util_1.formatId)(header);
        this.height = header.height;
        this.hash = header.hash;
        Object.assign(this, header);
    }
}
exports.BlockHeader = BlockHeader;
class Transaction {
    constructor(block, tx) {
        _Transaction_block.set(this, void 0);
        _Transaction_receipts.set(this, void 0);
        _Transaction_inputs.set(this, void 0);
        _Transaction_outputs.set(this, void 0);
        this.id = (0, util_1.formatId)(block, tx.index);
        this.index = tx.index;
        __classPrivateFieldSet(this, _Transaction_block, block, "f");
        Object.assign(this, tx);
    }
    get block() {
        return __classPrivateFieldGet(this, _Transaction_block, "f");
    }
    set block(value) {
        __classPrivateFieldSet(this, _Transaction_block, value, "f");
    }
    get receipts() {
        if (__classPrivateFieldGet(this, _Transaction_receipts, "f") == null) {
            __classPrivateFieldSet(this, _Transaction_receipts, [], "f");
        }
        return __classPrivateFieldGet(this, _Transaction_receipts, "f");
    }
    set receipts(value) {
        __classPrivateFieldSet(this, _Transaction_receipts, value, "f");
    }
    set inputs(value) {
        __classPrivateFieldSet(this, _Transaction_inputs, value, "f");
    }
    get inputs() {
        if (__classPrivateFieldGet(this, _Transaction_inputs, "f") == null) {
            __classPrivateFieldSet(this, _Transaction_inputs, [], "f");
        }
        return __classPrivateFieldGet(this, _Transaction_inputs, "f");
    }
    set outputs(value) {
        __classPrivateFieldSet(this, _Transaction_outputs, value, "f");
    }
    get outputs() {
        if (__classPrivateFieldGet(this, _Transaction_outputs, "f") == null) {
            __classPrivateFieldSet(this, _Transaction_outputs, [], "f");
        }
        return __classPrivateFieldGet(this, _Transaction_outputs, "f");
    }
}
exports.Transaction = Transaction;
_Transaction_block = new WeakMap(), _Transaction_receipts = new WeakMap(), _Transaction_inputs = new WeakMap(), _Transaction_outputs = new WeakMap();
class Receipt {
    constructor(block, i) {
        _Receipt_block.set(this, void 0);
        _Receipt_transaction.set(this, void 0);
        __classPrivateFieldSet(this, _Receipt_block, block, "f");
        this.id = (0, util_1.formatId)(block, i.transactionIndex);
        this.index = i.index;
        this.transactionIndex = i.transactionIndex;
        Object.assign(this, i);
    }
    get block() {
        return __classPrivateFieldGet(this, _Receipt_block, "f");
    }
    set block(value) {
        __classPrivateFieldSet(this, _Receipt_block, value, "f");
    }
    get transaction() {
        return __classPrivateFieldGet(this, _Receipt_transaction, "f");
    }
    set transaction(value) {
        __classPrivateFieldSet(this, _Receipt_transaction, value, "f");
    }
    getTransaction() {
        if (__classPrivateFieldGet(this, _Receipt_transaction, "f") == null) {
            throw new Error(`Transaction is not set on receipt ${this.id}`);
        }
        else {
            return __classPrivateFieldGet(this, _Receipt_transaction, "f");
        }
    }
}
exports.Receipt = Receipt;
_Receipt_block = new WeakMap(), _Receipt_transaction = new WeakMap();
class InputBase {
    constructor(block, src) {
        _InputBase_block.set(this, void 0);
        _InputBase_transaction.set(this, void 0);
        __classPrivateFieldSet(this, _InputBase_block, block, "f");
        this.id = (0, util_1.formatId)(block, src.transactionIndex, src.index);
        this.index = src.index;
        this.transactionIndex = src.transactionIndex;
        Object.assign(this, src);
    }
    get block() {
        return __classPrivateFieldGet(this, _InputBase_block, "f");
    }
    set block(value) {
        __classPrivateFieldSet(this, _InputBase_block, value, "f");
    }
    get transaction() {
        return __classPrivateFieldGet(this, _InputBase_transaction, "f");
    }
    set transaction(value) {
        __classPrivateFieldSet(this, _InputBase_transaction, value, "f");
    }
    getTransaction() {
        if (__classPrivateFieldGet(this, _InputBase_transaction, "f") == null) {
            throw new Error(`Transaction is not set on transaction input`);
        }
        else {
            return __classPrivateFieldGet(this, _InputBase_transaction, "f");
        }
    }
}
exports.InputBase = InputBase;
_InputBase_block = new WeakMap(), _InputBase_transaction = new WeakMap();
class InputCoin extends InputBase {
    constructor() {
        super(...arguments);
        this.type = 'InputCoin';
    }
}
exports.InputCoin = InputCoin;
class InputContract extends InputBase {
    constructor() {
        super(...arguments);
        this.type = 'InputContract';
    }
}
exports.InputContract = InputContract;
class InputMessage extends InputBase {
    constructor() {
        super(...arguments);
        this.type = 'InputMessage';
    }
}
exports.InputMessage = InputMessage;
class OutputBase {
    constructor(block, src) {
        _OutputBase_block.set(this, void 0);
        _OutputBase_transaction.set(this, void 0);
        __classPrivateFieldSet(this, _OutputBase_block, block, "f");
        this.index = src.index;
        this.transactionIndex = src.transactionIndex;
        Object.assign(this, src);
    }
    get block() {
        return __classPrivateFieldGet(this, _OutputBase_block, "f");
    }
    set block(value) {
        __classPrivateFieldSet(this, _OutputBase_block, value, "f");
    }
    get transaction() {
        return __classPrivateFieldGet(this, _OutputBase_transaction, "f");
    }
    set transaction(value) {
        __classPrivateFieldSet(this, _OutputBase_transaction, value, "f");
    }
    getTransaction() {
        if (__classPrivateFieldGet(this, _OutputBase_transaction, "f") == null) {
            throw new Error(`Transaction is not set on transaction output`);
        }
        else {
            return __classPrivateFieldGet(this, _OutputBase_transaction, "f");
        }
    }
}
exports.OutputBase = OutputBase;
_OutputBase_block = new WeakMap(), _OutputBase_transaction = new WeakMap();
class CoinOutput extends OutputBase {
    constructor() {
        super(...arguments);
        this.type = 'CoinOutput';
    }
}
exports.CoinOutput = CoinOutput;
class ContractOutput extends OutputBase {
    constructor() {
        super(...arguments);
        this.type = 'ContractOutput';
    }
}
exports.ContractOutput = ContractOutput;
class ChangeOutput extends OutputBase {
    constructor() {
        super(...arguments);
        this.type = 'ChangeOutput';
    }
}
exports.ChangeOutput = ChangeOutput;
class VariableOutput extends OutputBase {
    constructor() {
        super(...arguments);
        this.type = 'VariableOutput';
    }
}
exports.VariableOutput = VariableOutput;
class ContractCreated extends OutputBase {
    constructor() {
        super(...arguments);
        this.type = 'ContractCreated';
    }
}
exports.ContractCreated = ContractCreated;
//# sourceMappingURL=items.js.map