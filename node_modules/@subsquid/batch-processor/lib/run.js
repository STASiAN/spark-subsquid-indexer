"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
const logger_1 = require("@subsquid/logger");
const util_internal_1 = require("@subsquid/util-internal");
const util_internal_prometheus_server_1 = require("@subsquid/util-internal-prometheus-server");
const prom = __importStar(require("prom-client"));
const metrics_1 = require("./metrics");
const util_1 = require("./util");
const log = (0, logger_1.createLogger)('sqd:batch-processor');
/**
 * Run data processing.
 *
 * This method assumes full control over the current OS process as
 * it terminates the entire program in case of error or
 * at the end of data processing.
 *
 * @param src - data source to ingest data from
 *
 * @param db - database is responsible for providing storage API to data handler
 * and persisting mapping progress and status.
 *
 * @param dataHandler - The data handler, see {@link DataHandlerContext} for an API available to the handler.
 */
function run(src, db, dataHandler) {
    (0, util_internal_1.runProgram)(() => {
        return new Processor(src, db, dataHandler).run();
    }, err => {
        log.fatal(err);
    });
}
exports.run = run;
class Processor {
    constructor(src, db, handler) {
        this.src = src;
        this.db = db;
        this.handler = handler;
        this.metrics = new metrics_1.Metrics();
        this.hasStatusNews = false;
        this.chainHeight = new util_internal_1.Throttler(() => this.src.getFinalizedHeight(), 30000);
    }
    async run() {
        let state = await this.db.connect();
        if (state.height >= 0) {
            log.info(`last processed final block was ${state.height}`);
        }
        await this.assertWeAreOnTheSameChain(state);
        await this.initMetrics(state);
        for await (let blocks of this.src.getBlockStream(state.height + 1)) {
            if (blocks.length > 0) {
                state = await this.processBatch(state, blocks);
            }
        }
        this.reportFinalStatus();
    }
    async assertWeAreOnTheSameChain(state) {
        if (state.height < 0)
            return;
        let hash = await this.src.getBlockHash(state.height);
        if (state.hash === hash)
            return;
        throw new Error(`already indexed block ${(0, util_1.formatHead)(state)} was not found on chain`);
    }
    async initMetrics(state) {
        await this.updateProgressMetrics(await this.chainHeight.get(), state);
        let port = process.env.PROCESSOR_PROMETHEUS_PORT || process.env.PROMETHEUS_PORT;
        if (port == null)
            return;
        prom.collectDefaultMetrics();
        this.metrics.install();
        let server = await (0, util_internal_prometheus_server_1.createPrometheusServer)(prom.register, port);
        log.info(`prometheus metrics are served on port ${server.port}`);
    }
    updateProgressMetrics(chainHeight, state, time) {
        this.metrics.setChainHeight(chainHeight);
        this.metrics.setLastProcessedBlock(state.height);
        let left;
        let processed;
        if (this.src.getBlocksCountInRange) {
            left = this.src.getBlocksCountInRange({
                from: this.metrics.getLastProcessedBlock() + 1,
                to: this.metrics.getChainHeight()
            });
            processed = this.src.getBlocksCountInRange({
                from: 0,
                to: this.metrics.getChainHeight()
            }) - left;
        }
        else {
            left = this.metrics.getChainHeight() - this.metrics.getLastProcessedBlock();
            processed = this.metrics.getLastProcessedBlock();
        }
        this.metrics.updateProgress(processed, left, time);
    }
    async processBatch(prevHead, blocks) {
        let chainHeight = await this.chainHeight.get();
        let nextHead = {
            hash: (0, util_internal_1.last)(blocks).header.hash,
            height: (0, util_internal_1.last)(blocks).header.height
        };
        let isOnTop = nextHead.height >= chainHeight;
        let mappingStartTime = process.hrtime.bigint();
        await this.db.transact({
            prevHead,
            nextHead,
            isOnTop
        }, store => {
            return this.handler({
                store,
                blocks,
                isHead: isOnTop
            });
        });
        let mappingEndTime = process.hrtime.bigint();
        this.updateProgressMetrics(chainHeight, nextHead, mappingEndTime);
        this.metrics.registerBatch(blocks.length, (0, util_1.getItemsCount)(blocks), mappingStartTime, mappingEndTime);
        this.reportStatus();
        return nextHead;
    }
    reportStatus() {
        if (this.statusReportTimer == null) {
            log.info(this.metrics.getStatusLine());
            this.statusReportTimer = setTimeout(() => {
                this.statusReportTimer = undefined;
                if (this.hasStatusNews) {
                    this.hasStatusNews = false;
                    this.reportStatus();
                }
            }, 5000);
        }
        else {
            this.hasStatusNews = true;
        }
    }
    reportFinalStatus() {
        if (this.statusReportTimer != null) {
            clearTimeout(this.statusReportTimer);
        }
        if (this.hasStatusNews) {
            this.hasStatusNews = false;
            log.info(this.metrics.getStatusLine());
        }
    }
}
//# sourceMappingURL=run.js.map