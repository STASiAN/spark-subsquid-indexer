"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Metrics = void 0;
const util_internal_counters_1 = require("@subsquid/util-internal-counters");
const prom_client_1 = require("prom-client");
const util_1 = require("./util");
class Metrics {
    constructor() {
        this.chainHeight = -1;
        this.lastBlock = -1;
        this.mappingSpeed = new util_internal_counters_1.Speed({ windowSize: 5 });
        this.mappingItemSpeed = new util_internal_counters_1.Speed({ windowSize: 5 });
        this.blockProgress = new util_internal_counters_1.Progress({ initialValue: 0, windowSize: 20 });
    }
    setChainHeight(height) {
        this.chainHeight = Math.max(height, this.lastBlock);
    }
    setLastProcessedBlock(height) {
        this.lastBlock = height;
        this.chainHeight = Math.max(this.chainHeight, this.lastBlock);
    }
    updateProgress(processed, left, time) {
        this.blockProgress.setTargetValue(processed + left);
        this.blockProgress.setCurrentValue(processed, time);
    }
    registerBatch(batchSize, batchItemSize, batchMappingStartTime, batchMappingEndTime) {
        this.mappingSpeed.push(batchSize, batchMappingStartTime, batchMappingEndTime);
        this.mappingItemSpeed.push(batchItemSize || 1, batchMappingStartTime, batchMappingEndTime);
    }
    getChainHeight() {
        return this.chainHeight;
    }
    getLastProcessedBlock() {
        return this.lastBlock;
    }
    getSyncSpeed() {
        return this.blockProgress.speed();
    }
    getSyncEtaSeconds() {
        return this.blockProgress.eta();
    }
    getSyncRatio() {
        return this.blockProgress.ratio();
    }
    getMappingSpeed() {
        return this.mappingSpeed.speed();
    }
    getMappingItemSpeed() {
        return this.mappingItemSpeed.speed();
    }
    getStatusLine() {
        return `${this.lastBlock} / ${this.chainHeight}, ` +
            `rate: ${Math.round(this.getSyncSpeed())} blocks/sec, ` +
            `mapping: ${Math.round(this.getMappingSpeed())} blocks/sec, ` +
            `${Math.round(this.getMappingItemSpeed())} items/sec, ` +
            `eta: ${(0, util_1.timeInterval)(this.getSyncEtaSeconds())}`;
    }
    install() {
        new prom_client_1.Gauge({
            name: 'sqd_processor_chain_height',
            help: 'Chain height of the data source',
            collect: collect(() => this.getChainHeight())
        });
        new prom_client_1.Gauge({
            name: 'sqd_processor_last_block',
            help: 'Last processed block',
            collect: collect(() => this.getLastProcessedBlock())
        });
        new prom_client_1.Gauge({
            name: 'sqd_processor_mapping_blocks_per_second',
            help: 'Mapping performance',
            collect: collect(() => this.getMappingSpeed())
        });
        new prom_client_1.Gauge({
            name: 'sqd_processor_sync_eta_seconds',
            help: 'Estimated time until all required blocks will be processed or until the chain height will be reached',
            collect: collect(() => this.getSyncEtaSeconds())
        });
        new prom_client_1.Gauge({
            name: 'sqd_processor_sync_ratio',
            help: 'Percentage of processed blocks',
            collect: collect(() => this.getSyncRatio())
        });
    }
}
exports.Metrics = Metrics;
function collect(fn) {
    return function () {
        this.set(fn());
    };
}
//# sourceMappingURL=metrics.js.map